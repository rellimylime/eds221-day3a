---
title: "eds221-day3a"
format: html
editor: visual
---

## Boolean operator review

```{r}
# create some objects (eg tree heights)
pinyon_pine <- 14
lodgepole_pine <- 46

# some logical expressions
pinyon_pine == 10

pinyon_pine < lodgepole_pine

lodgepole_pine >= 46

pinyon_pine != 25

```
## Conditionals
```{r}
burrito <- 2.4

if (burrito > 2) {
  print("I love burritos!")
}
```
## Example with strings
```{r}
library(stringr)

my_ships <- c("Millenium Falcon", "X-wing", "Tie-Fighter", "Death Star")
str_detect(my_ships, pattern = "r")
```

```{r}
phrase <- "I love burritos"

if (str_detect(phrase, "love")) {
  print("Big burrito fan!")
}
```
## A basic if-else
```{r}
pika <- 89.1

if (pika > 60) {
  print("mega pika")
} else
  print("normal pika")
```
## Example with strings
```{r}
food <- "I love enchiladas!"

if (str_detect(food, "burritos")) {
  print("yay burritos!")
} else
  print("what about burritos?")
```

## Basic for loop
```{r}
dog_names <- c("Teddy", "Khora", "Banjo", "Waffle")

for (pupster in dog_names) {
  cat("My dog's name is", pupster, "\n")
}
```
```{r}
mass <- seq(from = 0, to = 3, by = 0.5)

for (i in mass) {
  new_val = i + 2
  print(new_val)
}

for (i in seq_along(mass)) {
  new_val = mass[i] + 2
  print(new_val)
}
```
```{r}
tree_height <- c(1, 2, 6, 10) 

for (i in seq_along(tree_height)) {
  val = tree_height[i] + tree_height[i + 1]
  print(val)
}
```
## For loops with conditionals
```{r}
animal <- c("cat", "dog", "dog", "zebra", "dog")

for (i in seq_along(animal)) {
  if (animal[i] == "dog") {
    print("I love dogs!")
  } else 
    print("There are other animals!")
}
```

```{r}
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

animal_ages <- vector(mode = "numeric", length = length(species))

age_human <- c(3, 8, 4, 6, 12, 18)

for (i in seq_along(species)) {
  if (species[i] == "dog") {
    animal_age <- age_human[i] * 7
  } else if (species[i] == "elephant") {
    animal_age <- age_human[i] * 0.88
  } else if (species[i] == "goat") {
    animal_age <- age_human[i] * 4.7
  }
  animal_ages[i] <- animal_age
}
```
## Storing loop outputs
```{r}
tigers <- c(29, 34, 82)
lions <- c(2, 18, 6)

big_cats <- vector(mode = "numeric", length = length(tigers))

for (i in seq_along(tigers)) {
  total_cats <- tigers[i] + lions[i]
  big_cats[i] <- total_cats
}
big_cats

# better alternative
big_cats <- tigers + lions
big_cats
```
## For loops across columns of data
```{r}
mean_mtcars <- vector(mode = "numeric", length = ncol(mtcars))

for (i in 1:ncol(mtcars)) {
  mean_val <- mean(mtcars[[i]], na.rm = TRUE)
  mean_mtcars[[i]] <- mean_val
}
```
## For loop over columns with condition
```{r}
library(palmerpenguins)
for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
    penguin_med <- median(penguins[[i]], na.rm = TRUE)
    print(penguin_med)
  } else {
    print("non-numeric")
  }
}
```
## Apply
```{r}
apply(X = mtcars, MARGIN = 2, FUN = mean)
```
dlpyr::across(), group_by(), and summarize() combo
```{r}
library(dplyr)
penguins %>% 
  group_by(species) %>% 
  summarise(across(where(is.numeric), mean, na.rm = TRUE))
```
## purrr::map()
```{r}
library(purrr)
map(.x = mtcars, .f = mean)

map_df(.x = mtcars, .f = mean)
```

